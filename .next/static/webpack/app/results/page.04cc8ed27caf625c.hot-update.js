"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/results/page",{

/***/ "(app-pages-browser)/./src/lib/arxiv.ts":
/*!**************************!*\
  !*** ./src/lib/arxiv.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   batchIndexArxivPapers: function() { return /* binding */ batchIndexArxivPapers; },\n/* harmony export */   fetchPaperContent: function() { return /* binding */ fetchPaperContent; },\n/* harmony export */   searchArxiv: function() { return /* binding */ searchArxiv; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var xml2js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xml2js */ \"(app-pages-browser)/./node_modules/xml2js/lib/xml2js.js\");\n/* harmony import */ var xml2js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xml2js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cache */ \"(app-pages-browser)/./src/lib/cache.ts\");\n/* harmony import */ var _pinecone__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pinecone */ \"(app-pages-browser)/./src/lib/pinecone.ts\");\n\n\n\n\nconst ARXIV_API_URL = \"http://export.arxiv.org/api/query\";\nconst CACHE_TTL = 3600; // 1 hour\nconst MAX_RETRIES = 5;\nconst BASE_DELAY = 1000; // 1 second base delay\nasync function delay(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\nasync function retryWithBackoff(operation) {\n    let retries = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : MAX_RETRIES, baseDelay = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : BASE_DELAY, factor = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 2;\n    let lastError;\n    for(let i = 0; i < retries; i++){\n        try {\n            // Add a small random delay before each request to prevent thundering herd\n            await delay(Math.random() * 1000);\n            return await operation();\n        } catch (error) {\n            var _error_response, _error_response1;\n            lastError = error;\n            // If this is a rate limit or connection error, wait and retry\n            if (error.code === \"ECONNRESET\" || error.code === \"ETIMEDOUT\" || ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 429 || ((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.status) >= 500) {\n                const waitTime = baseDelay * Math.pow(factor, i) * (1 + Math.random() * 0.1);\n                console.warn(\"Request failed (attempt \".concat(i + 1, \"/\").concat(retries, \"). Waiting \").concat(Math.round(waitTime), \"ms before retry...\"));\n                await delay(waitTime);\n                continue;\n            }\n            // For other errors, throw immediately\n            throw error;\n        }\n    }\n    throw lastError;\n}\nasync function searchArxiv(query) {\n    let maxResults = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 100, start = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, sortBy = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : \"submittedDate\", sortOrder = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : \"descending\";\n    // Check cache first\n    const cacheKey = \"arxiv_search:\".concat(query, \":\").concat(maxResults, \":\").concat(start, \":\").concat(sortBy, \":\").concat(sortOrder);\n    const cachedResult = (0,_cache__WEBPACK_IMPORTED_MODULE_1__.getCachedData)(cacheKey);\n    if (cachedResult) {\n        return cachedResult;\n    }\n    try {\n        // Use retryWithBackoff for the API call\n        const response = await retryWithBackoff(()=>axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].get(ARXIV_API_URL, {\n                params: {\n                    search_query: query,\n                    start,\n                    max_results: maxResults,\n                    sortBy,\n                    sortOrder\n                },\n                timeout: 30000,\n                headers: {\n                    \"User-Agent\": \"Perplexity Research Assistant/1.0\"\n                }\n            }));\n        const result = await (0,xml2js__WEBPACK_IMPORTED_MODULE_0__.parseStringPromise)(response.data);\n        const entries = result.feed.entry || [];\n        const papers = entries.map((entry)=>{\n            var _entry_arxivdoi, _entry_arxivjournal_ref;\n            const categories = Array.isArray(entry.category) ? entry.category.map((cat)=>cat.$.term) : [];\n            const id = entry.id[0].split(\"/abs/\")[1];\n            const version = parseInt(id.split(\"v\")[1]) || 1;\n            return {\n                id,\n                title: entry.title[0].replace(/\\s+/g, \" \").trim(),\n                summary: entry.summary[0].replace(/\\s+/g, \" \").trim(),\n                authors: entry.author.map((author)=>author.name[0]),\n                categories,\n                published: entry.published[0],\n                updated: entry.updated[0],\n                doi: (_entry_arxivdoi = entry[\"arxiv:doi\"]) === null || _entry_arxivdoi === void 0 ? void 0 : _entry_arxivdoi[0],\n                journal_ref: (_entry_arxivjournal_ref = entry[\"arxiv:journal_ref\"]) === null || _entry_arxivjournal_ref === void 0 ? void 0 : _entry_arxivjournal_ref[0],\n                pdf_url: \"https://arxiv.org/pdf/\".concat(id, \".pdf\"),\n                version\n            };\n        });\n        // Cache the results\n        (0,_cache__WEBPACK_IMPORTED_MODULE_1__.setCachedData)(cacheKey, papers, CACHE_TTL);\n        return papers;\n    } catch (error) {\n        console.error(\"Error fetching from arXiv:\", error);\n        throw error;\n    }\n}\nasync function fetchPaperContent(paperId) {\n    try {\n        var _result_feed_entry;\n        // Use retryWithBackoff for the API call\n        const response = await retryWithBackoff(()=>axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].get(\"\".concat(ARXIV_API_URL, \"?id_list=\").concat(paperId), {\n                timeout: 30000,\n                headers: {\n                    \"User-Agent\": \"Perplexity Research Assistant/1.0\"\n                }\n            }));\n        const result = await (0,xml2js__WEBPACK_IMPORTED_MODULE_0__.parseStringPromise)(response.data);\n        const entry = (_result_feed_entry = result.feed.entry) === null || _result_feed_entry === void 0 ? void 0 : _result_feed_entry[0];\n        if (!entry || !entry.summary) {\n            throw new Error(\"No abstract available\");\n        }\n        // Return the abstract\n        return entry.summary[0].trim();\n    } catch (error) {\n        console.error(\"Error fetching paper content:\", error);\n        return \"\"; // Return empty string if fetch fails\n    }\n}\n// Implement batch processing for vector store operations\nasync function batchIndexArxivPapers(papers) {\n    let batchSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n    for(let i = 0; i < papers.length; i += batchSize){\n        const batch = papers.slice(i, i + batchSize);\n        await Promise.all(batch.map((paper)=>(0,_pinecone__WEBPACK_IMPORTED_MODULE_2__.indexArxivPaper)(\"Title: \".concat(paper.title, \"\\n\\nAbstract: \").concat(paper.summary, \"\\n\\nAuthors: \").concat(paper.authors.join(\", \")), {\n                paperId: paper.id,\n                title: paper.title,\n                authors: paper.authors,\n                categories: paper.categories,\n                published: paper.published\n            })));\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/arxiv.ts\n"));

/***/ })

});