"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/results/page",{

/***/ "(app-pages-browser)/./src/lib/arxiv.ts":
/*!**************************!*\
  !*** ./src/lib/arxiv.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   batchIndexArxivPapers: () => (/* binding */ batchIndexArxivPapers),\n/* harmony export */   fetchPaperContent: () => (/* binding */ fetchPaperContent),\n/* harmony export */   searchArxiv: () => (/* binding */ searchArxiv)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var xml2js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! xml2js */ \"(app-pages-browser)/./node_modules/xml2js/lib/xml2js.js\");\n/* harmony import */ var xml2js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(xml2js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cache */ \"(app-pages-browser)/./src/lib/cache.ts\");\n\n\n\nconst CACHE_TTL = 3600; // 1 hour\nasync function searchArxiv(query) {\n    let maxResults = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 100;\n    // Check cache first\n    const cacheKey = \"arxiv_search:\".concat(query, \":\").concat(maxResults);\n    const cachedResult = (0,_cache__WEBPACK_IMPORTED_MODULE_1__.getCachedData)(cacheKey);\n    if (cachedResult) {\n        return cachedResult;\n    }\n    // If not in cache, fetch from API\n    const baseUrl = 'http://export.arxiv.org/api/query';\n    const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(baseUrl, {\n        params: {\n            search_query: query,\n            start: 0,\n            max_results: maxResults\n        },\n        timeout: 10000\n    });\n    const result = await (0,xml2js__WEBPACK_IMPORTED_MODULE_0__.parseStringPromise)(response.data);\n    const entries = result.feed.entry || [];\n    const papers = entries.map((entry)=>({\n            id: entry.id[0].split('/abs/')[1],\n            title: entry.title[0].trim(),\n            summary: entry.summary[0].trim(),\n            authors: entry.author.map((author)=>author.name[0]),\n            categories: entry['arxiv:primary_category'].map((cat)=>cat.$.term),\n            published: entry.published[0]\n        }));\n    // Cache the results\n    (0,_cache__WEBPACK_IMPORTED_MODULE_1__.setCachedData)(cacheKey, papers, CACHE_TTL);\n    return papers;\n}\n// Implement batch processing for vector store operations\nasync function batchIndexArxivPapers(papers) {\n    let batchSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n    for(let i = 0; i < papers.length; i += batchSize){\n        const batch = papers.slice(i, i + batchSize);\n        await Promise.all(batch.map((paper)=>indexArxivPaper(paper.summary, {\n                paperId: paper.id,\n                title: paper.title,\n                authors: paper.authors,\n                categories: paper.categories,\n                published: paper.published,\n                summary: paper.summary\n            })));\n    }\n}\nasync function fetchPaperContent(paperId) {\n    const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(\"https://arxiv.org/abs/\".concat(paperId));\n    // Note: This is a simplified version. In production, you'd want to properly parse the PDF\n    // or use arXiv's API to get the full text if available\n    return response.data;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvYXJ4aXYudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUEwQjtBQUNrQjtBQUNXO0FBV3ZELE1BQU1JLFlBQVksTUFBTSxTQUFTO0FBRTFCLGVBQWVDLFlBQVlDLEtBQWE7UUFBRUMsYUFBQUEsaUVBQXFCO0lBQ3BFLG9CQUFvQjtJQUNwQixNQUFNQyxXQUFXLGdCQUF5QkQsT0FBVEQsT0FBTSxLQUFjLE9BQVhDO0lBQzFDLE1BQU1FLGVBQWVQLHFEQUFhQSxDQUFlTTtJQUNqRCxJQUFJQyxjQUFjO1FBQ2hCLE9BQU9BO0lBQ1Q7SUFFQSxrQ0FBa0M7SUFDbEMsTUFBTUMsVUFBVTtJQUNoQixNQUFNQyxXQUFXLE1BQU1YLDZDQUFLQSxDQUFDWSxHQUFHLENBQUNGLFNBQVM7UUFDeENHLFFBQVE7WUFDTkMsY0FBY1I7WUFDZFMsT0FBTztZQUNQQyxhQUFhVDtRQUNmO1FBQ0FVLFNBQVM7SUFDWDtJQUVBLE1BQU1DLFNBQVMsTUFBTWpCLDBEQUFrQkEsQ0FBQ1UsU0FBU1EsSUFBSTtJQUNyRCxNQUFNQyxVQUFVRixPQUFPRyxJQUFJLENBQUNDLEtBQUssSUFBSSxFQUFFO0lBRXZDLE1BQU1DLFNBQVNILFFBQVFJLEdBQUcsQ0FBQyxDQUFDRixRQUFnQjtZQUMxQ0csSUFBSUgsTUFBTUcsRUFBRSxDQUFDLEVBQUUsQ0FBQ0MsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ2pDQyxPQUFPTCxNQUFNSyxLQUFLLENBQUMsRUFBRSxDQUFDQyxJQUFJO1lBQzFCQyxTQUFTUCxNQUFNTyxPQUFPLENBQUMsRUFBRSxDQUFDRCxJQUFJO1lBQzlCRSxTQUFTUixNQUFNUyxNQUFNLENBQUNQLEdBQUcsQ0FBQyxDQUFDTyxTQUFnQkEsT0FBT0MsSUFBSSxDQUFDLEVBQUU7WUFDekRDLFlBQVlYLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQ0UsR0FBRyxDQUFDLENBQUNVLE1BQWFBLElBQUlDLENBQUMsQ0FBQ0MsSUFBSTtZQUN4RUMsV0FBV2YsTUFBTWUsU0FBUyxDQUFDLEVBQUU7UUFDL0I7SUFFQSxvQkFBb0I7SUFDcEJsQyxxREFBYUEsQ0FBQ0ssVUFBVWUsUUFBUW5CO0lBRWhDLE9BQU9tQjtBQUNUO0FBRUEseURBQXlEO0FBQ2xELGVBQWVlLHNCQUFzQmYsTUFBb0I7UUFBRWdCLFlBQUFBLGlFQUFvQjtJQUNwRixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSWpCLE9BQU9rQixNQUFNLEVBQUVELEtBQUtELFVBQVc7UUFDakQsTUFBTUcsUUFBUW5CLE9BQU9vQixLQUFLLENBQUNILEdBQUdBLElBQUlEO1FBQ2xDLE1BQU1LLFFBQVFDLEdBQUcsQ0FBQ0gsTUFBTWxCLEdBQUcsQ0FBQ3NCLENBQUFBLFFBQzFCQyxnQkFBZ0JELE1BQU1qQixPQUFPLEVBQUU7Z0JBQzdCbUIsU0FBU0YsTUFBTXJCLEVBQUU7Z0JBQ2pCRSxPQUFPbUIsTUFBTW5CLEtBQUs7Z0JBQ2xCRyxTQUFTZ0IsTUFBTWhCLE9BQU87Z0JBQ3RCRyxZQUFZYSxNQUFNYixVQUFVO2dCQUM1QkksV0FBV1MsTUFBTVQsU0FBUztnQkFDMUJSLFNBQVNpQixNQUFNakIsT0FBTztZQUN4QjtJQUVKO0FBQ0Y7QUFFTyxlQUFlb0Isa0JBQWtCRCxPQUFlO0lBQ3JELE1BQU1yQyxXQUFXLE1BQU1YLDZDQUFLQSxDQUFDWSxHQUFHLENBQUMseUJBQWlDLE9BQVJvQztJQUMxRCwwRkFBMEY7SUFDMUYsdURBQXVEO0lBQ3ZELE9BQU9yQyxTQUFTUSxJQUFJO0FBQ3RCIiwic291cmNlcyI6WyIvVXNlcnMvY2xhcmFldmVyZXR0L0Rlc2t0b3AvcGVycGxleGl0eS9zcmMvbGliL2FyeGl2LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBwYXJzZVN0cmluZ1Byb21pc2UgfSBmcm9tICd4bWwyanMnO1xuaW1wb3J0IHsgZ2V0Q2FjaGVkRGF0YSwgc2V0Q2FjaGVkRGF0YSB9IGZyb20gJy4vY2FjaGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFyeGl2UGFwZXIge1xuICBpZDogc3RyaW5nO1xuICB0aXRsZTogc3RyaW5nO1xuICBzdW1tYXJ5OiBzdHJpbmc7XG4gIGF1dGhvcnM6IHN0cmluZ1tdO1xuICBjYXRlZ29yaWVzOiBzdHJpbmdbXTtcbiAgcHVibGlzaGVkOiBzdHJpbmc7XG59XG5cbmNvbnN0IENBQ0hFX1RUTCA9IDM2MDA7IC8vIDEgaG91clxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VhcmNoQXJ4aXYocXVlcnk6IHN0cmluZywgbWF4UmVzdWx0czogbnVtYmVyID0gMTAwKTogUHJvbWlzZTxBcnhpdlBhcGVyW10+IHtcbiAgLy8gQ2hlY2sgY2FjaGUgZmlyc3RcbiAgY29uc3QgY2FjaGVLZXkgPSBgYXJ4aXZfc2VhcmNoOiR7cXVlcnl9OiR7bWF4UmVzdWx0c31gO1xuICBjb25zdCBjYWNoZWRSZXN1bHQgPSBnZXRDYWNoZWREYXRhPEFyeGl2UGFwZXJbXT4oY2FjaGVLZXkpO1xuICBpZiAoY2FjaGVkUmVzdWx0KSB7XG4gICAgcmV0dXJuIGNhY2hlZFJlc3VsdDtcbiAgfVxuXG4gIC8vIElmIG5vdCBpbiBjYWNoZSwgZmV0Y2ggZnJvbSBBUElcbiAgY29uc3QgYmFzZVVybCA9ICdodHRwOi8vZXhwb3J0LmFyeGl2Lm9yZy9hcGkvcXVlcnknO1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChiYXNlVXJsLCB7XG4gICAgcGFyYW1zOiB7XG4gICAgICBzZWFyY2hfcXVlcnk6IHF1ZXJ5LFxuICAgICAgc3RhcnQ6IDAsXG4gICAgICBtYXhfcmVzdWx0czogbWF4UmVzdWx0cyxcbiAgICB9LFxuICAgIHRpbWVvdXQ6IDEwMDAwLCAvLyAxMCBzZWNvbmQgdGltZW91dFxuICB9KTtcblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBwYXJzZVN0cmluZ1Byb21pc2UocmVzcG9uc2UuZGF0YSk7XG4gIGNvbnN0IGVudHJpZXMgPSByZXN1bHQuZmVlZC5lbnRyeSB8fCBbXTtcblxuICBjb25zdCBwYXBlcnMgPSBlbnRyaWVzLm1hcCgoZW50cnk6IGFueSkgPT4gKHtcbiAgICBpZDogZW50cnkuaWRbMF0uc3BsaXQoJy9hYnMvJylbMV0sXG4gICAgdGl0bGU6IGVudHJ5LnRpdGxlWzBdLnRyaW0oKSxcbiAgICBzdW1tYXJ5OiBlbnRyeS5zdW1tYXJ5WzBdLnRyaW0oKSxcbiAgICBhdXRob3JzOiBlbnRyeS5hdXRob3IubWFwKChhdXRob3I6IGFueSkgPT4gYXV0aG9yLm5hbWVbMF0pLFxuICAgIGNhdGVnb3JpZXM6IGVudHJ5WydhcnhpdjpwcmltYXJ5X2NhdGVnb3J5J10ubWFwKChjYXQ6IGFueSkgPT4gY2F0LiQudGVybSksXG4gICAgcHVibGlzaGVkOiBlbnRyeS5wdWJsaXNoZWRbMF0sXG4gIH0pKTtcblxuICAvLyBDYWNoZSB0aGUgcmVzdWx0c1xuICBzZXRDYWNoZWREYXRhKGNhY2hlS2V5LCBwYXBlcnMsIENBQ0hFX1RUTCk7XG4gIFxuICByZXR1cm4gcGFwZXJzO1xufVxuXG4vLyBJbXBsZW1lbnQgYmF0Y2ggcHJvY2Vzc2luZyBmb3IgdmVjdG9yIHN0b3JlIG9wZXJhdGlvbnNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBiYXRjaEluZGV4QXJ4aXZQYXBlcnMocGFwZXJzOiBBcnhpdlBhcGVyW10sIGJhdGNoU2l6ZTogbnVtYmVyID0gMTApIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXBlcnMubGVuZ3RoOyBpICs9IGJhdGNoU2l6ZSkge1xuICAgIGNvbnN0IGJhdGNoID0gcGFwZXJzLnNsaWNlKGksIGkgKyBiYXRjaFNpemUpO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKGJhdGNoLm1hcChwYXBlciA9PiBcbiAgICAgIGluZGV4QXJ4aXZQYXBlcihwYXBlci5zdW1tYXJ5LCB7XG4gICAgICAgIHBhcGVySWQ6IHBhcGVyLmlkLFxuICAgICAgICB0aXRsZTogcGFwZXIudGl0bGUsXG4gICAgICAgIGF1dGhvcnM6IHBhcGVyLmF1dGhvcnMsXG4gICAgICAgIGNhdGVnb3JpZXM6IHBhcGVyLmNhdGVnb3JpZXMsXG4gICAgICAgIHB1Ymxpc2hlZDogcGFwZXIucHVibGlzaGVkLFxuICAgICAgICBzdW1tYXJ5OiBwYXBlci5zdW1tYXJ5XG4gICAgICB9KVxuICAgICkpO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaFBhcGVyQ29udGVudChwYXBlcklkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChgaHR0cHM6Ly9hcnhpdi5vcmcvYWJzLyR7cGFwZXJJZH1gKTtcbiAgLy8gTm90ZTogVGhpcyBpcyBhIHNpbXBsaWZpZWQgdmVyc2lvbi4gSW4gcHJvZHVjdGlvbiwgeW91J2Qgd2FudCB0byBwcm9wZXJseSBwYXJzZSB0aGUgUERGXG4gIC8vIG9yIHVzZSBhclhpdidzIEFQSSB0byBnZXQgdGhlIGZ1bGwgdGV4dCBpZiBhdmFpbGFibGVcbiAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG59Il0sIm5hbWVzIjpbImF4aW9zIiwicGFyc2VTdHJpbmdQcm9taXNlIiwiZ2V0Q2FjaGVkRGF0YSIsInNldENhY2hlZERhdGEiLCJDQUNIRV9UVEwiLCJzZWFyY2hBcnhpdiIsInF1ZXJ5IiwibWF4UmVzdWx0cyIsImNhY2hlS2V5IiwiY2FjaGVkUmVzdWx0IiwiYmFzZVVybCIsInJlc3BvbnNlIiwiZ2V0IiwicGFyYW1zIiwic2VhcmNoX3F1ZXJ5Iiwic3RhcnQiLCJtYXhfcmVzdWx0cyIsInRpbWVvdXQiLCJyZXN1bHQiLCJkYXRhIiwiZW50cmllcyIsImZlZWQiLCJlbnRyeSIsInBhcGVycyIsIm1hcCIsImlkIiwic3BsaXQiLCJ0aXRsZSIsInRyaW0iLCJzdW1tYXJ5IiwiYXV0aG9ycyIsImF1dGhvciIsIm5hbWUiLCJjYXRlZ29yaWVzIiwiY2F0IiwiJCIsInRlcm0iLCJwdWJsaXNoZWQiLCJiYXRjaEluZGV4QXJ4aXZQYXBlcnMiLCJiYXRjaFNpemUiLCJpIiwibGVuZ3RoIiwiYmF0Y2giLCJzbGljZSIsIlByb21pc2UiLCJhbGwiLCJwYXBlciIsImluZGV4QXJ4aXZQYXBlciIsInBhcGVySWQiLCJmZXRjaFBhcGVyQ29udGVudCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/arxiv.ts\n"));

/***/ })

});